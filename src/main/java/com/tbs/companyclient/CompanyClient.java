/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tbs.companyclient;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author tom
 */
public class CompanyClient extends javax.swing.JFrame implements DepartmentCallback, EmployeeCallback {
  private static int departmentIndex = -1;
  private static int departmentId = -1;

  /**
   * Creates new form CompanyClient
   */
  public CompanyClient() {
    initComponents();
  }

  public void createDepartmentCallback(Department department) {
    System.out.println("Received data from department dialog: " + department.getName() + " " + department.getLocation());
    CompanyRESTfulClient.createDepartment(department);
    readDepartments();
  }

  public void updateDepartmentCallback(Department department) {
    System.out.println("Received data from department dialog: " + department.getName() + " " + department.getLocation());
    CompanyRESTfulClient.updateDepartment(department);
    readDepartments();
  }

  public void createEmployeeCallback(Employee employee) {
    System.out.println("Received data from employee dialog: " + employee.getName());
    CompanyRESTfulClient.createEmployee(employee);
    readEmployeesFromDepartment(departmentId);
  }

  public void updateEmployeeCallback(Employee employee) {
    System.out.println("Received data from employee dialog: " + employee.getName());
    if(CompanyRESTfulClient.updateEmployee(employee) != ErrorCodes.OK) readEmployeesFromDepartment(departmentId);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    buttonGroup2 = new javax.swing.ButtonGroup();
    jScrollPane1 = new javax.swing.JScrollPane();
    departmentTable = new javax.swing.JTable();
    jLabel1 = new javax.swing.JLabel();
    createDepartmentButton = new javax.swing.JButton();
    updateDepartmentButton = new javax.swing.JButton();
    deleteDepartmentButton = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    employeeTable = new javax.swing.JTable();
    jSeparator1 = new javax.swing.JSeparator();
    jLabel2 = new javax.swing.JLabel();
    createEmployeeButton = new javax.swing.JButton();
    updateEmployeeButton = new javax.swing.JButton();
    deleteEmployeeButton = new javax.swing.JButton();
    readDepartmentButton = new javax.swing.JButton();
    readEmployeeButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Company Client");

    departmentTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "ID", "Name", "Location"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, true, true
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jScrollPane1.setViewportView(departmentTable);

    jLabel1.setText("Department");

    createDepartmentButton.setText("Create");
    buttonGroup1.add(createDepartmentButton);
    createDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        createDepartmentButtonActionPerformed(evt);
      }
    });

    updateDepartmentButton.setText("Update");
    buttonGroup1.add(updateDepartmentButton);
    updateDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateDepartmentButtonActionPerformed(evt);
      }
    });

    deleteDepartmentButton.setText("Delete");
    buttonGroup1.add(deleteDepartmentButton);
    deleteDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteDepartmentButtonActionPerformed(evt);
      }
    });

    employeeTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "ID", "Name", "Extension", "E-Mail", "Start Date", "Derpartment"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, true, true, true, true, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jScrollPane2.setViewportView(employeeTable);

    jLabel2.setText("Employee");

    createEmployeeButton.setText("Create");
    buttonGroup2.add(createEmployeeButton);
    createEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        createEmployeeButtonActionPerformed(evt);
      }
    });

    updateEmployeeButton.setText("Update");
    buttonGroup2.add(updateEmployeeButton);
    updateEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateEmployeeButtonActionPerformed(evt);
      }
    });

    deleteEmployeeButton.setText("Delete");
    buttonGroup2.add(deleteEmployeeButton);
    deleteEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteEmployeeButtonActionPerformed(evt);
      }
    });

    readDepartmentButton.setText("Read");
    readDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        readDepartmentButtonActionPerformed(evt);
      }
    });

    readEmployeeButton.setText("Read");
    readEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        readEmployeeButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(deleteEmployeeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(updateEmployeeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(createEmployeeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(readEmployeeButton)))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(deleteDepartmentButton, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(updateDepartmentButton, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(createDepartmentButton, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(readDepartmentButton))))))
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel2)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {createDepartmentButton, deleteDepartmentButton, readDepartmentButton, updateDepartmentButton});

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {createEmployeeButton, deleteEmployeeButton, readEmployeeButton, updateEmployeeButton});

    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(createDepartmentButton)
            .addGap(18, 18, 18)
            .addComponent(readDepartmentButton)
            .addGap(18, 18, 18)
            .addComponent(updateDepartmentButton)
            .addGap(18, 18, 18)
            .addComponent(deleteDepartmentButton)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(createEmployeeButton)
            .addGap(18, 18, 18)
            .addComponent(readEmployeeButton)
            .addGap(18, 18, 18)
            .addComponent(updateEmployeeButton)
            .addGap(18, 18, 18)
            .addComponent(deleteEmployeeButton)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void createDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDepartmentButtonActionPerformed
    CompanyClient caller = new CompanyClient();
    DepartmentDialog departmentDialog = new DepartmentDialog(caller);
    departmentDialog.setVisible(true);
  }//GEN-LAST:event_createDepartmentButtonActionPerformed

  private void updateDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDepartmentButtonActionPerformed
    int selectedRow = departmentTable.getSelectedRow();
    if (selectedRow != -1) {
      Integer departmentId = (Integer) departmentTable.getValueAt(selectedRow, 0);
      String name = (String) departmentTable.getValueAt(selectedRow, 1);
      String location = (String) departmentTable.getValueAt(selectedRow, 2);
      Department department = new Department(departmentId, name, location);
      CompanyClient caller = new CompanyClient();
      DepartmentDialog departmentDialog = new DepartmentDialog(department, caller);
      departmentDialog.setVisible(true);
    }
  }//GEN-LAST:event_updateDepartmentButtonActionPerformed

  private void deleteDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDepartmentButtonActionPerformed
    int selectedRow = departmentTable.getSelectedRow();
    if (selectedRow != -1) {
      int choice = JOptionPane.showConfirmDialog(null, "Do you want to proceed?", "Delete Department", JOptionPane.OK_CANCEL_OPTION);
      if (choice == JOptionPane.OK_OPTION) {
        System.out.println("User clicked OK");
        int[] selectedRows = departmentTable.getSelectedRows();
        // Iterate through selected rows
        for (int row : selectedRows) {
          // Access data from selected row
          Integer departmentId = (Integer) departmentTable.getValueAt(row, 0);
          // Perform actions with the retrieved data
          System.out.println("delete selected row - Column 1: " + departmentId);
          CompanyRESTfulClient.deleteDepartment(departmentId);
        }
      } else if (choice == JOptionPane.CANCEL_OPTION) {
        System.out.println("User clicked Cancel");
      } else if (choice == JOptionPane.CLOSED_OPTION) {
        System.out.println("User closed the dialog without clicking any button");
      }
    }
  }//GEN-LAST:event_deleteDepartmentButtonActionPerformed

  private void createEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createEmployeeButtonActionPerformed
    CompanyClient caller = new CompanyClient();
    EmployeeDialog employeeDialog = new EmployeeDialog(departmentIndex, caller);
    employeeDialog.setVisible(true);
  }//GEN-LAST:event_createEmployeeButtonActionPerformed

  private void updateEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEmployeeButtonActionPerformed
    int selectedRow = employeeTable.getSelectedRow();
    if (selectedRow != -1) {
      Integer employeeId = (Integer) employeeTable.getValueAt(selectedRow, 0);
      String name = (String) employeeTable.getValueAt(selectedRow, 1);
      Integer extension = (Integer) employeeTable.getValueAt(selectedRow, 2);
      String email = (String) employeeTable.getValueAt(selectedRow, 3);
      String startDate = (String) employeeTable.getValueAt(selectedRow, 4);
      Integer departmentId = (Integer) employeeTable.getValueAt(selectedRow, 5);
      Employee employee = new Employee(employeeId, name, extension, email, startDate, departmentId);
      CompanyClient caller = new CompanyClient();
      EmployeeDialog employeeDialog = new EmployeeDialog(employee, caller);
      employeeDialog.setVisible(true);
    }
  }//GEN-LAST:event_updateEmployeeButtonActionPerformed

  private void deleteEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeButtonActionPerformed
    int selectedRow = employeeTable.getSelectedRow();
    if (selectedRow != -1) {
      int choice = JOptionPane.showConfirmDialog(null, "Do you want to proceed?", "Delete Employee", JOptionPane.OK_CANCEL_OPTION);
      if (choice == JOptionPane.OK_OPTION) {
        System.out.println("User clicked OK");
        int[] selectedRows = employeeTable.getSelectedRows();
        // Iterate through selected rows
        for (int row : selectedRows) {
          // Access data from selected row
          Integer employeeId = (Integer) employeeTable.getValueAt(row, 0);
          // Perform actions with the retrieved data
          System.out.println("delete selected row - Column 1: " + employeeId);
          CompanyRESTfulClient.deleteEmployee(employeeId);
        }
      } else if (choice == JOptionPane.CANCEL_OPTION) {
        System.out.println("User clicked Cancel");
      } else if (choice == JOptionPane.CLOSED_OPTION) {
        System.out.println("User closed the dialog without clicking any button");
      }
    }
  }//GEN-LAST:event_deleteEmployeeButtonActionPerformed

  private void readDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readDepartmentButtonActionPerformed
    readDepartments();
  }//GEN-LAST:event_readDepartmentButtonActionPerformed

  private void readEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readEmployeeButtonActionPerformed
    readEmployeesFromDepartment(departmentId);
  }//GEN-LAST:event_readEmployeeButtonActionPerformed

  private void addDepartmentSelectionListener() {
    departmentTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent event) {
        if (!event.getValueIsAdjusting()) {
          // Get the selected row index
          int selectedRow = departmentTable.getSelectedRow();
          // Get the data from the selected row, e.g., jTable1.getValueAt(selectedRow, column)
          // Handle row selection event here
          if (selectedRow != -1) {
            departmentIndex = selectedRow;
            departmentId = (Integer) departmentTable.getValueAt(selectedRow, 0);
            readEmployeesFromDepartment(departmentId);
          }
        }
      }
    });
  }
  
  private void addDepartmentTableModelListener() {
    TableModel departmentTableModel = departmentTable.getModel();
    departmentTableModel.addTableModelListener(new TableModelListener() {
      @Override
      public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE) {
          int row = e.getFirstRow();
          updateDepartment(row);
        }
      }
    });
  }
  
  private void addEmployeeTableModelListener() {
    TableModel employeeTableModel = employeeTable.getModel();
    employeeTableModel.addTableModelListener(new TableModelListener() {
      @Override
      public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE) {
          int row = e.getFirstRow();
          updateEmployee(row);
        }
      }
    });
  }
  
  private void readDepartments() {
    List<Department> departments = CompanyRESTfulClient.readAllDepartments();
    Object[][] data = convertDepartmentListToArray(departments);
    DefaultTableModel departmentModel = (DefaultTableModel) departmentTable.getModel();
    departmentModel.setRowCount(0);
    DefaultTableModel employeeModel = (DefaultTableModel) employeeTable.getModel();
    employeeModel.setRowCount(0);
    for (Object[] row : data) {
      departmentModel.addRow(row);
    }
  }

  private void readEmployeesFromDepartment(int departmentId) {
    if (departmentId > -1) {
      List<Employee> employees = CompanyRESTfulClient.readEmployeesFromDepartment(departmentId);
      Object[][] data = convertEmployeeListToArray(employees);
      DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
      model.setRowCount(0);
      for (Object[] row : data) {
        model.addRow(row);
      }
    }
  }

  private void updateDepartment(int row) {
    TableModel tableModel = departmentTable.getModel();    
    int id = (int) tableModel.getValueAt(row, 0);
    String name = (String) tableModel.getValueAt(row, 1);
    String location = (String) tableModel.getValueAt(row, 2);
    Department department = new Department(id, name, location);
    CompanyRESTfulClient.updateDepartment(department);
  }
  
  private void updateEmployee(int row) {
    TableModel tableModel = employeeTable.getModel();
    int id = (int) tableModel.getValueAt(row, 0);
    String name = (String) tableModel.getValueAt(row, 1);
    int extension = (int) tableModel.getValueAt(row, 2);
    String email = (String) tableModel.getValueAt(row, 3);
    String startDate = (String) tableModel.getValueAt(row, 4);
    int departmentId = (int) tableModel.getValueAt(row, 5);
    Employee employee = new Employee(id, name, extension, email, startDate, departmentId);
    CompanyRESTfulClient.updateEmployee(employee);
  }
  
  private Object[][] convertDepartmentListToArray(List<Department> departments) {
    Object[][] array = new Object[departments.size()][departmentTable.getColumnCount()];
    for (int i = 0; i < departments.size(); i++) {
      Department department = departments.get(i);
      array[i][0] = department.getId();
      array[i][1] = department.getName();
      array[i][2] = department.getLocation();
    }
    return array;
  }

  private Object[][] convertEmployeeListToArray(List<Employee> employees) {
    Object[][] array = new Object[employees.size()][employeeTable.getColumnCount()];
    for (int i = 0; i < employees.size(); i++) {
      Employee employee = employees.get(i);
      array[i][0] = employee.getId();
      array[i][1] = employee.getName();
      array[i][2] = employee.getExtension();
      array[i][3] = employee.getEmail();
      array[i][4] = employee.getStartDate();
      array[i][5] = employee.getDepartmentId();
    }
    return array;
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(CompanyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(CompanyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(CompanyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(CompanyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        CompanyClient companyClient = new CompanyClient();
        companyClient.setVisible(true);
//        companyClient.readDepartments();
        companyClient.addDepartmentSelectionListener();
        companyClient.addDepartmentTableModelListener();
        companyClient.addEmployeeTableModelListener();
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.ButtonGroup buttonGroup2;
  private javax.swing.JButton createDepartmentButton;
  private javax.swing.JButton createEmployeeButton;
  private javax.swing.JButton deleteDepartmentButton;
  private javax.swing.JButton deleteEmployeeButton;
  private javax.swing.JTable departmentTable;
  private javax.swing.JTable employeeTable;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JButton readDepartmentButton;
  private javax.swing.JButton readEmployeeButton;
  private javax.swing.JButton updateDepartmentButton;
  private javax.swing.JButton updateEmployeeButton;
  // End of variables declaration//GEN-END:variables
}
